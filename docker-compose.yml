services:
  db: # MySql database
    image: mysql:8.0
    container_name: orders_tracker_db
    command: --default-authentication-plugin=mysql_native_password --innodb_flush_log_at_trx_commit=1 --innodb_flush_method=O_DIRECT
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./database:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u$$MYSQL_USER -p$$MYSQL_PASSWORD --silent"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks: [app-net]
    restart: unless-stopped

  db_backup: # Service to perform periodic automatic backup of the database on the storage bucket
    build:
      context: ./backup
      dockerfile: Dockerfile
    container_name: orders_tracker_db_backup
    environment:
      TZ: Europe/Rome
      MYSQL_HOST: db
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      RESTIC_REPOSITORY: ${RESTIC_REPOSITORY}
      RESTIC_PASSWORD: ${RESTIC_PASSWORD}
      RESTIC_CACHE_DIR: /restic-cache
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_REGION}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./restic/restic_cache:/restic-cache
      - status:/status 
    networks: [app-net]
    restart: unless-stopped

  sentinel: # Gateway service to automaically check at each request if the periodic automatic backup mechanism is working (If not, the app won't be reachable)
    build:
      context: ./sentinel
      dockerfile: Dockerfile
    container_name: orders_tracker_backup_sentinel
    environment:
      TZ: Europe/Rome
      SENTINEL_THRESHOLD_SECONDS: "93600" # 26h (2 backups/day with tolerance)
      SENTINEL_BOOT_GRACE_SECONDS: "86400"  # 24 hours of grace on first start
      SENTINEL_HEARTBEAT_PATH: "/status/last_ok"
    volumes:
      - status:/status:ro
    expose:
      - "8080"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 12
    networks: [app-net]
    restart: unless-stopped

  backend: # Backend of the application
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: orders_tracker_backend
    environment:
        # DB
        DB_HOST: db
        DB_USER: ${MYSQL_USER}
        DB_PASSWORD: ${MYSQL_PASSWORD}
        DB_PORT: ${MYSQL_PORT:-3306}
        DB_NAME: ${MYSQL_DATABASE}

        # Security
        SECRET_KEY: ${SECRET_KEY}
        REGISTRATION_PASSWORD_HASH: ${REGISTRATION_PASSWORD_HASH}
        JWT_ALGORITHM: ${JWT_ALGORITHM}
        ACCESS_TOKEN_EXP_MINUTES: ${ACCESS_TOKEN_EXP_MINUTES}
        REFRESH_TOKEN_EXP_DAYS: ${REFRESH_TOKEN_EXP_DAYS}

        # CORS
        CORS_ORIGINS: '["https://${DOMAIN}", "http://localhost:3000"]'

        # Cookie
        REFRESH_COOKIE_SECURE: ${REFRESH_COOKIE_SECURE}
        REFRESH_COOKIE_DOMAIN: ${DOMAIN}
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8000"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 12
    networks: [app-net]
    restart: unless-stopped

  frontend: # Frontend of the application
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_COMPANY_NAME: ${NEXT_PUBLIC_COMPANY_NAME}
        NEXT_PUBLIC_API_BASE_URL: /api
        NEXT_PUBLIC_SITE_URL: https://${DOMAIN}
    container_name: orders_tracker_frontend
    depends_on:
      backend:
        condition: service_healthy
    expose:
      - "3000"
    networks: [app-net]
    restart: unless-stopped

  nginx: # Development reverse proxy with nginx (only HTTP)
    image: nginx:alpine
    container_name: orders_tracker_nginx
    profiles: ["dev"]
    depends_on:
      - frontend
      - backend
      - sentinel
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
    networks: [app-net]
    restart: unless-stopped

  nginx_prod: # Production reverse proxy with nginx (HTTPS + envsubst of the domain)
    image: nginx:alpine
    container_name: orders_tracker_nginx_prod
    profiles: ["prod"]
    depends_on:
      - frontend
      - backend
      - sentinel
    environment:
      DOMAIN: ${DOMAIN}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf.tpl:/etc/nginx/templates/default.conf.tpl:ro
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    command: >
      /bin/sh -c "apk add --no-cache gettext >/dev/null &&
                  envsubst '$$DOMAIN' < /etc/nginx/templates/default.conf.tpl > /etc/nginx/conf.d/default.conf &&
                  nginx -g 'daemon off;'"
    networks: [app-net]
    restart: unless-stopped

  certbot: # Certbot service for generating and rotating ssl certificate
    image: certbot/certbot
    container_name: orders_tracker_certbot
    profiles: ["prod"]
    depends_on:
      - nginx_prod
    environment:
      DOMAIN: ${DOMAIN}
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: sh
    command: -c "trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot; sleep 12h & wait $${!}; done"

volumes:
  status: {}

networks:
  app-net:
    driver: bridge