services:
  db: # MySql database
    image: mysql:8.0
    container_name: orders_tracker_db
    command: --default-authentication-plugin=mysql_native_password --innodb_flush_log_at_trx_commit=1 --innodb_flush_method=O_DIRECT
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE:-orders}
      MYSQL_USER: ${MYSQL_USER:-orders}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-orders}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
    volumes:
      - ./database:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u$$MYSQL_USER -p$$MYSQL_PASSWORD --silent"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks: [app-net]
    restart: unless-stopped

  db_backup: # Service to perform periodic automatic backup of the database on the storage bucket
    build:
      context: ./backup
      dockerfile: Dockerfile
    container_name: orders_tracker_db_backup
    environment:
      TZ: Europe/Rome
      MYSQL_HOST: db
      MYSQL_DATABASE: ${MYSQL_DATABASE:-orders}
      MYSQL_USER: ${MYSQL_USER:-orders}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-orders}
      RESTIC_REPOSITORY: ${RESTIC_REPOSITORY}
      RESTIC_PASSWORD: ${RESTIC_PASSWORD:-change_this_password}
      RESTIC_CACHE_DIR: /restic-cache
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_REGION}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./restic/restic_cache:/restic-cache
      - status:/status 
    networks: [app-net]
    restart: unless-stopped

  sentinel: # Gateway service to automaically check at each request if the periodic automatic backup mechanism is working (If not, the app won't be reachable)
    build:
      context: ./sentinel
      dockerfile: Dockerfile
    container_name: orders_tracker_backup_sentinel
    environment:
      TZ: Europe/Rome
      SENTINEL_THRESHOLD_SECONDS: "93600" # 26h (2 backups/day with tolerance)
      SENTINEL_BOOT_GRACE_SECONDS: "86400"  # 24 hours of grace on first start
      SENTINEL_HEARTBEAT_PATH: "/status/last_ok"
    volumes:
      - status:/status:ro
    expose:
      - "8080"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 12
    networks: [app-net]
    restart: unless-stopped

  backend: # Backend of the application
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: orders_tracker_backend
    env_file:
      - ./backend/.env.production
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8000"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 12
    networks: [app-net]
    restart: unless-stopped

  frontend: # Frontend of the application
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: orders_tracker_frontend
    env_file:
      - ./frontend/.env.production
    depends_on:
      backend:
        condition: service_healthy
    expose:
      - "3000"
    networks: [app-net]
    restart: unless-stopped

  nginx: # reverse proxy
    image: nginx:alpine
    container_name: orders_tracker_nginx
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks: [app-net]
    restart: unless-stopped

volumes:
  status: {}

networks:
  app-net:
    driver: bridge